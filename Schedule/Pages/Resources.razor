@page "/resources"
@using QuestPDF.Infrastructure
@using QuestPDF.Fluent
@using Microsoft.Extensions.Options
@using Schedule.Core.Interfaces.Data
@using Schedule.Core.Interfaces.Services
@inject IRouteData RouteData
@inject IFindRoute FindRoute
@inject IPdfBuilder PdfBuilder
@inject IJSRuntime JS
@inject IOptions<Core.Data.Models.Config.About> AboutConf

<PageTitle>PDF расписание общественного транспорта в городе Белая Калитва - @AboutConf.Value.ProjectName</PageTitle>

<MudContainer>
    <MudStack Spacing="10" Style="margin-top: 30px" Justify="Justify.SpaceAround">
        <MudStack>
            <MudText Typo="Typo.h3">
                Здесь можно получить расписание в виде pdf
            </MudText>
            <MudText Typo="Typo.body1">
                Просто выберите ниже маршрут, по какому требуется расписание
            </MudText>
            <MudSelect T="string" @bind-Value="selectedValue" Variant="Variant.Outlined" Placeholder="Выберете нужный вам маршрут">
                @foreach (var item in _values)
                {
                    <MudSelectItem Value="@item"/>
                }
            </MudSelect>
            <MudStack Row="true">
                <MudSpacer/>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.Download" OnClick="GetConcreteSchedule">
                    Сохранить
                </MudButton>
            </MudStack>
        </MudStack>
        <MudText Typo="Typo.h3" Align="Align.Center">ИЛИ</MudText>
        <MudStack Spacing="4">
            <MudText Typo="Typo.body1" Align="Align.Center">
                Сохраните себе полное расписание, по всем доступным маршрутам
            </MudText>
            <MudButton FullWidth="true" Variant="Variant.Filled" StartIcon="@Icons.Filled.Download" OnClick="GetFullSchedule">
                Получить полное расписание
            </MudButton>
        </MudStack>
    </MudStack>
</MudContainer>

@code {
    IEnumerable<string> _values = Array.Empty<string>();
    string selectedValue;

    protected override void OnInitialized()
    {
        _values = RouteData.GetAllRoutes().Select(item => item.RouteName).Distinct();
    }

    private async Task GetFullSchedule()
    {
        // BUG: Сделать нормально всё
        /*var allRoutes = RouteData.GetAllRoutes();

        var routes = allRoutes.OrderBy(item => item.RouteName);
        
        pdfDoc = new MainDocument(routes);
        byte[] resultPdf = pdfDoc.GeneratePdf();

        Stream pdfStream = new MemoryStream(resultPdf);
        using var streamJs = new DotNetStreamReference(pdfStream);
        
        await JS.InvokeVoidAsync("downloadFileFromStream", PdfBuilder.GetMetadata().Title, streamJs);*/
    }

    private async Task GetConcreteSchedule()
    {
        if (string.IsNullOrEmpty(selectedValue))
        {
            return;
        }

        var routes = FindRoute.Find(selectedValue);

        if (routes != null)
        {
            byte[] resultPdf = PdfBuilder.BuildPdf(routes);

            Stream pdfStream = new MemoryStream(resultPdf);
            using var streamJs = new DotNetStreamReference(pdfStream);

            await JS.InvokeVoidAsync("downloadFileFromStream", PdfBuilder.GetMetadata().Title, streamJs);
        }
    }
}