@page "/schedule"
@using Schedule.Core.Interfaces.Data
@using Schedule.Core.Interfaces.Services
@using Schedule.Core.Data.Models
@inject IPdfBuilder PdfBuilder
@inject IRouteData RouteData
@inject IFindRoute FindService
@inject INavigation Navigation
@inject IJSRuntime JS
@inject IDialogService MessageBox
@inject NavigationManager NavigationManager;


<PageTitle>Расписание</PageTitle>

@if (_scheduleLoad)
{
    <MudOverlay @bind-Visible="_scheduleLoad" LockScroll="true" DarkBackground="true">
        <MudProgressCircular Color="@Color.Primary" Indeterminate="true"/>
    </MudOverlay>
}

<MudContainer>
    <MudStack Spacing="5">
        <MudStack>
            <MudStack Row="true" Spacing="4">
                <MudText Typo="Typo.h4">
                    Расписание по маршруту
                </MudText>
                <MudSelect T="string" @ref="_selectRoute" AnchorOrigin="Origin.TopCenter" Variant="Variant.Outlined" ValueChanged="OnSelectedRoute" Placeholder="Выберете нужный вам маршрут">
                    @if (_routeNames != null)
                    {
                        @foreach (var item in _routeNames)
                        {
                            <MudSelectItem Value="@item"/>
                        }
                    }
                </MudSelect>
            </MudStack>
            @if (_routes != null && _routes.Any())
            {
                <MudStack Row="true" Spacing="5">
                    <MudText>
                        Результатов <MudText Typo="Typo.inherit" Color="Color.Info">@_routes.Count.ToString()</MudText>
                    </MudText>
                    <MudText>
                        По маршруту <MudText Typo="Typo.inherit" Color="Color.Info">@_routes.First().RouteName</MudText>
                    </MudText>
                    <MudSpacer/>
                    <MudButton OnClick="SaveAsPdf" StartIcon="@Icons.Filled.Download" Variant="Variant.Filled">
                        Сохранить на память
                    </MudButton>
                    <MudText>@_routes.First().From - @_routes.First().To</MudText>
                </MudStack>
            }
        </MudStack>

        @if (_routes != null && _routes.Any())
        {
            <MudTable T="RouteItem" Items="@_routes" GroupBy="@_groupDefinition" Loading="_scheduleLoad" Striped="true" Breakpoint="Breakpoint.Sm">
                <ColGroup>
                    <col/>
                    <col/>
                    <col/>
                    <col/>
                </ColGroup>
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel T="RouteItem" SortBy="model => model.From">Откуда</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel T="RouteItem" SortBy="model => model.To">Куда</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel T="RouteItem" SortBy="model => model.DepartureTime">Время</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel T="RouteItem" SortBy="model => model.Note">Примечание</MudTableSortLabel>
                    </MudTh>
                </HeaderContent>
                <GroupHeaderTemplate>
                    @if ((bool)context.Key)
                    {
                        <MudTh>
                            <MudText Typo="Typo.h4">
                                Выходные, праздники
                            </MudText>
                        </MudTh>
                    }
                    else
                    {
                        <MudTh>
                            <MudText Typo="Typo.h4">
                                Будни
                            </MudText>
                        </MudTh>
                    }
                </GroupHeaderTemplate>
                <RowTemplate>
                    <MudTd DataLabel="Откуда">@context.From</MudTd>
                    <MudTd DataLabel="Куда">@context.To</MudTd>
                    <MudTd DataLabel="Время">@context.DepartureTime</MudTd>
                    <MudTd DataLabel="Примечание">@context.Note</MudTd>
                </RowTemplate>
            </MudTable>
        }
    </MudStack>
</MudContainer>

@code {
    private string Search { get; set; }
    private TableGroupDefinition<RouteItem> _groupDefinition = new()
    {
        Indentation = false,
        Expandable = false,
        Selector = route => route.IsSpecialDay
    };

    MudSelect<string> _selectRoute;
    IEnumerable<string> _routeNames;
    List<RouteItem>? _routes;
    private bool _scheduleLoad;

    protected override void OnInitialized()
    {
        // Нет отписки, так как нет обработчика переключения страниц
        NavigationManager.LocationChanged += LocationChanged;

        Dictionary<string, string> paramsFromQuery = Navigation.GetParamsFromQuery(NavigationManager.Uri);

        try
        {
            Search = paramsFromQuery["search"];
        }
        catch (KeyNotFoundException) { }
    }

    private void LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        Dictionary<string, string> paramsFromQuery = Navigation.GetParamsFromQuery(NavigationManager.Uri);


        string search = Search;
        paramsFromQuery.TryGetValue("search", out search);
    }
    
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            StartLoading();
            _routeNames = RouteData.GetAllRoutes()
                .DistinctBy(item => item.RouteName)
                .Select(item => item.RouteName);

            SetDefaultValues();
            
            
            if (Search != null)
            {
                Search = Uri.UnescapeDataString(Search);
                FindRoute(Search);
            }

            StopLoading();
        }
    }
    
    private void SetDefaultValues()
    {
    }

    /// <summary>Sets the search value</summary>
    void FindRoute(string query)
    {
        if (string.IsNullOrEmpty(query))
        {
            return;
        }

        try
        {
            var resultRoutes = FindService.Find(query);
            
            _routes = resultRoutes.ToList();
        }
        catch (Exception)
        {
            ShowErrorSearch();
        }
    }

    private void StartLoading()
    {
        _scheduleLoad = true;
        StateHasChanged();
    }

    private void StopLoading()
    {
        _scheduleLoad = false;
        StateHasChanged();
    }

    private void ShowErrorSearch()
    {
        MessageBox.ShowMessageBox("Не удалось ничего найти", "Ничего подходящего не найдено, может очепятка где ни-будь?", yesText:"Сейчас переделаю");
    }

    private void OnSelectedRoute(string id)
    {
        _routes = FindService.Find(id).ToList();
    }
    
    private async Task SaveAsPdf()
    {
        if (string.IsNullOrEmpty(_selectRoute.Value))
        {
            return;
        }

        StartLoading();
        
        byte[] resultPdf = PdfBuilder.BuildPdf(_routes);
        StopLoading();

        Stream pdfStream = new MemoryStream(resultPdf);
        using var streamJs = new DotNetStreamReference(pdfStream);
        
        await JS.InvokeVoidAsync("downloadFileFromStream", PdfBuilder.GetMetadata().Title, streamJs);
    }
}