@page "/schedule/{routeNumber}"
@page "/schedule"
@using global::Schedule.Data
@inject RouteManager RouteManager
@inject IDialogService MessageBox;

<PageTitle>Расписание</PageTitle>

@if (_scheduleLoad)
{
    <MudOverlay @bind-Visible="_scheduleLoad" LockScroll="true" DarkBackground="true">
        <MudProgressCircular Color="@Color.Primary" Indeterminate="true"/>
    </MudOverlay>
}

<MudContainer>
    <MudStack Spacing="5">
        <MudStack Row="true" Spacing="2">
            <MudText Typo="Typo.h4">
                Расписание по маршруту
            </MudText>
            <MudSelect T="int" @ref="_selectRoute" AnchorOrigin="Origin.TopCenter" Variant="Variant.Outlined" ValueChanged="OnSelectedRoute">
                @if (_routeNumbers != null)
                {
                    @foreach (var item in _routeNumbers)
                    {
                        <MudSelectItem Value="@item"/>
                    }
                }
            </MudSelect>
        </MudStack>

        @if (_routes != null && _routes.Any())
        {
            <MudTable T="Route" Items="@_routes">
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel T="Route" SortBy="model => model.To">Куда</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel T="Route" SortBy="model => model.From">Откуда</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel T="Route" SortBy="model => model.DepartureTime">Время</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel T="Route" SortBy="model => model.Note">Примечание</MudTableSortLabel>
                    </MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Куда">@context.To</MudTd>
                    <MudTd DataLabel="Откуда">@context.From</MudTd>
                    <MudTd DataLabel="Время">@context.DepartureTime.Hour:@context.DepartureTime.Minute</MudTd>
                    <MudTd DataLabel="Примечание">@context.Note</MudTd>
                </RowTemplate>
            </MudTable>
        }
    </MudStack>
</MudContainer>


@code {
    [Parameter]
    public string? RouteNumber { get; set; }

    MudSelect<int> _selectRoute;
    List<int> _routeNumbers;
    IQueryable<Route> _routes;
    private bool _scheduleLoad;
    
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            StartLoading();
        
            SetDefaultValues();

            if (RouteNumber != null)
            {
                SetValues();
            }

            StopLoading();
        }
    }
    
    private void SetDefaultValues()
    {
        _routeNumbers = RouteManager.GetRouteNumbers();
    }

    /// <summary>Sets the search value</summary>
    void SetValues()
    {
        if (int.TryParse(RouteNumber, out var route))
        {
            _routes = RouteManager.GetRoutes(route);
            _selectRoute.Value = route;
            
            return;
        }

        _routes = RouteManager.GetRoutesByPoint(RouteNumber);

        if (_routes.Any())
        {
            _selectRoute.Value = _routes.First().RouteNumber;
            
            return;
        }

        StopLoading();
        ShowErrorSearch();
    }

    private void StartLoading()
    {
        _scheduleLoad = true;
        StateHasChanged();
    }

    private void StopLoading()
    {
        _scheduleLoad = false;
        StateHasChanged();
    }

    private void ShowErrorSearch()
    {
        MessageBox.ShowMessageBox("Не удалось ничего найти", "Ничего подходящего не найдено, может очепятка где ни-будь?", yesText:"Сейчас переделаю");
    }

    private void OnSelectedRoute(int id)
    {
        _routes = RouteManager.GetRoutes(id);
    }

}